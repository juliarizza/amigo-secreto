(dp1
S'output'
p2
S"<type 'exceptions.RuntimeError'> Syntax Not Supported"
p3
sS'layer'
p4
S'/home/julia/Documents/web2py/applications/sorteio/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    form = SQLFORM.factory(\n        Field(\'nome\', label=T(\'Name\'), requires=IS_NOT_EMPTY()),\n        Field(\'email\', label=T(\'E-mail\'), requires=IS_EMAIL()),\n        Field(\'mensagem\', \'text\', label=T(\'Message\'), requires=IS_NOT_EMPTY())\n        )\n    if form.process().accepted:\n        mail.send(\n            to=["you@gmail.com"],\n            reply_to=form.vars.email,\n            subject="Mensagem recebida em sorteio.com",\n            message="%s enviou a seguinte mensagem: %s" % (form.vars.nome, form.vars.mensagem)\n            )\n        response.flash = T("Message sent!")\n    elif form.errors:\n        response.flash = T("Form has errors!")\n    return dict(form=form)\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    response.title += " - "+request.args(0).replace(\'_\',\' \').title()\n    if request.args(0) == \'login\':\n        retorno = response.render(\'default/login.html\',dict(form=auth()))\n    elif request.args(0) == \'register\':\n        retorno = response.render(\'default/register.html\',dict(form=auth()))\n    elif request.args(0) == \'retrieve_password\':\n        retorno = response.render(\'default/retrieve_psw.html\',dict(form=auth()))\n    else:\n        retorno = response.render(\'default/user.html\',dict(form=auth()))\n    return retorno\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n## P\xc3\xa1ginas da App\n\n## Grupo\n@auth.requires_login()\ndef dashboard():\n    participa_em = []\n    for grupo in db(Grupo).select():\n        if participa_grupo(grupo.id) or dono_grupo(grupo.id):\n            participa_em.append(grupo.id)\n\n    grupos = db(Grupo.id.belongs(participa_em)).select()\n    return dict(grupos=grupos)\n\n@auth.requires(lambda: dono_grupo(request.args(0, cast=int)) or participa_grupo(request.args(0,cast=int))\\\n                        or auth.has_membership(\'Administrador\'))\ndef grupo():\n    response.title += \' - Grupo\'\n    id_grupo = request.args(0, cast=int)\n    grupo = db(Grupo.id == id_grupo).select().first()\n    p = db(Usuario_Grupo.id_grupo == id_grupo).select()\n    \n    participantes = [x.id_auth_user for x in p]\n    participantes.append(grupo.created_by)\n\n    return dict(grupo=grupo, participantes=participantes)\n\n@auth.requires_login()\ndef novo_grupo():\n    response.title += \' - Novo Grupo\'\n    form = crud.create(Grupo)\n\n    for el in form.elements():\n        if el[\'_type\'] == \'text\':\n            el[\'_class\'] = \'form-control\'\n        elif el in form.elements("label"):\n            el[\'_class\'] = \'sub-title\'\n        elif el[\'_type\'] == \'submit\':\n            el[\'_class\'] = \'btn btn-success\'\n            el[\'_style\'] = \'margin-top: 20px;\'\n            \n    return dict(form=form)\n\n@auth.requires(lambda: dono_grupo(request.args(0, cast=int)) or auth.has_membership(\'Administrador\'))\ndef atualizar_grupo():\n    response.title += \' - Atualizar Grupo\'\n    id_grupo = request.args(0, cast=int)\n    form = crud.update(Grupo, id_grupo)\n\n    for el in form.elements():\n        if el[\'_type\'] == \'text\':\n            el[\'_class\'] = \'form-control\'\n        elif el in form.elements("label"):\n            el[\'_class\'] = \'sub-title\'\n        elif el[\'_type\'] == \'submit\':\n            el[\'_class\'] = \'btn btn-success\'\n            el[\'_style\'] = \'margin-top: 20px;\'\n    return dict(form=form)\n\n@auth.requires(lambda: dono_grupo(request.args(0, cast=int)) or auth.has_membership(\'Administrador\'))\ndef apagar_grupo():\n    id_grupo = request.args(0, cast=int)\n    db(Grupo.id == id_grupo).delete()\n    redirect(URL(\'dashboard\'))\n\n@auth.requires(lambda: dono_grupo(request.args(0, cast=int)) or \\\n    participa_grupo(request.args(0, cast=int)) or \\\n    auth.has_membership(\'Administrador\'))\ndef convidar_amigo():\n    id_grupo = request.args(0, cast=int)\n    grupo = db(Grupo.id == id_grupo).select().first()\n    form = SQLFORM.factory(\n        Field(\'nome\', label="Nome do Amigo"),\n        Field(\'email\', label="Email do Amigo")\n        )\n    if form.process().accepted:\n        mail.send(\n            to = form.vars.email,\n            subject = "Voc\xc3\xaa foi convidado para um grupo de Amigo Secreto!",\n            message = """\n            Voc\xc3\xaa foi convidado para um grupo de Amigo Secreto por %s %s. Para participar, acesse:\n            %s\n            """ % (auth.user.first_name, auth.user.last_name, URL(\'adicionar_amigo\', args=grupo.hash_id, host=True, scheme=True))\n            )\n\n    return dict(form=form)\n\n@auth.requires_login()\ndef adicionar_amigo():\n    hash_grupo = request.args(0)\n    grupo = db(Grupo.hash_id == hash_grupo).select().first()\n    if not db((Usuario_Grupo.id_grupo == grupo.id)&\\\n              (Usuario_Grupo.id_auth_user == auth.user.id)).count()\\\n        and not grupo.created_by == auth.user.id:\n        Usuario_Grupo.insert(id_auth_user=auth.user.id,id_grupo=grupo.id)\n\n    redirect(URL(\'grupo\', args=grupo.id))\n\ndef sortear():\n    id_grupo = request.args(0, cast=int)\n    grupo = db(Grupo.id == id_grupo).select().first()\n    p = db(Usuario_Grupo.id_grupo == id_grupo).select()\n\n    participantes = [x.id_auth_user for x in p]\n    participantes.append(grupo.created_by)\n\n    r = realizar_sorteio(participantes)\n    if db(Sorteio.id_grupo == id_grupo).count():\n        Sorteio.update(participantes=r)\n    else:\n        Sorteio.insert(participantes=r,id_grupo=id_grupo)\n    redirect(URL(\'grupo\',args=id_grupo))\n\n## Forum\n@auth.requires(lambda: participa_grupo(request.args(0, cast=int)) or auth.has_membership("Administrador"))\ndef forum():\n    response.title += \' - F\xc3\xb3rum\'\n    id_grupo = request.args(0, cast=int)\n    \n    ## pagina\xc3\xa7\xc3\xa3o\n    if not request.vars.page or int(request.vars.page) <= 0:\n        print(\'if 1\')\n        redirect(URL(args=request.args, vars={\'page\':1}))\n    else:\n        pagina = int(request.vars.page)\n\n    inicio = (pagina-1)*10\n    fim = pagina*10\n\n    ## busca\n    if request.vars.q:\n        q = request.vars.q\n        mensagens = db((Forum.id_grupo == id_grupo)&(Forum.mensagem.like(\'%\'+q+\'%\'))).select(orderby=~Forum.created_on, limitby=(inicio,fim))\n    else:\n        mensagens = db(Forum.id_grupo == id_grupo).select(orderby=~Forum.created_on, limitby=(inicio,fim))\n\n    ## valida\xc3\xa7\xc3\xa3o da pagina\xc3\xa7\xc3\xa3o\n    qtd_pags = (db(Forum.id_grupo == id_grupo).count()/10)+1\n    if int(request.vars.page) > qtd_pags:\n        redirect(URL(args=request.args,vars={\'page\':qtd_pags}))\n    \n    Forum.id_grupo.default = id_grupo\n    Forum.id_grupo.writable = Forum.id_grupo.readable = False\n    \n    form = SQLFORM(Forum)\n    if form.process().accepted:\n        session.flash = T("Message sent!")\n        redirect(URL(\'forum\', args=id_grupo))\n    elif form.errors:\n        response.flash = T("Form has errors!")\n\n    return dict(mensagens=mensagens, form=form)\n\n@auth.requires(lambda: db(Forum.id == request.args(0, cast=int)).select().first().created_by == auth.user.id \\\n                or auth.has_membership("Administrador"))\ndef editar_mensagem():\n    response.title += \' - Editar Mensagem\'\n    id_registro = request.args(0, cast=int)\n\n    Forum.id_grupo.writable = Forum.id_grupo.readable = False\n\n    form = crud.update(Forum, id_registro)\n    return dict(form=form, id_grupo=db(Forum.id == id_registro).select().first().id_grupo)\n\n@auth.requires(lambda: db(Forum.id == request.args(0, cast=int)).select().first().created_by == auth.user.id \\\n                or auth.has_membership("Administrador"))\ndef apagar_mensagem():\n    id_registro = request.args(0, cast=int)\n    msg = db(Forum.id == id_registro).select().first()\n    id_grupo = msg.id_grupo\n    db(Forum.id == id_registro).delete()\n    redirect(URL(\'forum\', args=[id_grupo]))\n\n## Lista de Desejos\n\ndef desejos():\n    response.title += " - Lista de Desejos"\n\n    id_usuario = request.args(0, cast=int)\n    desejos = db(Lista_Desejos.id_auth_user == id_usuario).select()\n    usuario = db(db.auth_user.id == id_usuario).select().first()\n    return dict(desejos=desejos, usuario=usuario)\n\ndef novo_desejo():\n    response.title += \' - Novo Desejo\'\n    id_usuario = request.args(0, cast=int)\n\n    Lista_Desejos.id_auth_user.default = id_usuario\n    Lista_Desejos.id_auth_user.writable = False\n    Lista_Desejos.id_auth_user.readable = False\n\n    form = crud.create(Lista_Desejos)\n    return dict(form=form)\n\ndef editar_desejo():\n    response.title += \' - Editar Desejo\'\n    id_registro = request.args(0, cast=int) \n\n    Lista_Desejos.id_auth_user.writable = False\n    Lista_Desejos.id_auth_user.readable = False\n\n    form = crud.update(Lista_Desejos, id_registro)\n    return dict(form=form)\n\ndef apagar_desejo():\n    id_registro = request.args(0, cast=int)\n    desejo = db(Lista_Desejos.id == id_registro).select().first()\n    db(Lista_Desejos.id == id_registro).delete()\n    redirect(URL(\'desejos\', args=[desejo.id_auth_user]))\nresponse._vars=response._caller(sortear)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/julia/Documents/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/julia/Documents/web2py/applications/sorteio/controllers/default.py", line 292, in <module>\n  File "/home/julia/Documents/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/julia/Documents/web2py/applications/sorteio/controllers/default.py", line 191, in sortear\n    Sorteio.update(participantes=r)\n  File "/home/julia/Documents/web2py/gluon/packages/dal/pydal/objects.py", line 364, in update\n    raise RuntimeError("Syntax Not Supported")\nRuntimeError: Syntax Not Supported\n'
p11
s.